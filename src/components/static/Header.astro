---
import { appendBaseUrl } from "@/utils";
import { getI18N } from "@/i18n";
import { ThemeSwitcher } from "../ThemeSwitcher";
import { Menu, X } from "@lucide/astro";
import { Link } from "../Link";

const { lang } = Astro.props;

const languageUrl = lang === "es" ? appendBaseUrl("/en") : appendBaseUrl("");
const languageCaption = lang === "es" ? "EN" : "ES";
const flagUrl = appendBaseUrl(lang === "es" ? "/usa.svg" : "/mexico.svg");
const { COMPONENTS, HEADER_MENU_CAPTION, HEADER_PAGE_VERSION_CAPTION } =
  getI18N(lang);
const { HEADER } = COMPONENTS;
---

<header
  class="border-b p-2 h-16 flex justify-between items-center bg-white dark:bg-black_rain dark:border-b-black_rain-900 dark:text-white"
>
  <section class="flex items-center gap-1">
    <img src="/og-image.jpg" width="32" class="" alt="Jorge A Macias Z" />

    <h1 class="font-bold">Jorge Macias</h1>
  </section>

  <ul class="hidden md:flex md:items-center">
    {
      HEADER.map(({ label, url }) => {
        return <Link label={label} url={url} />;
      })
    }
  </ul>

  <section class="hidden md:flex md:items-center md:justify-between gap-4">
    <div class="p-2 flex items-center justify-between gap-1">
      <ThemeSwitcher client:only="react" />

      <a class="flex items-center gap-2 py-1" href={languageUrl}>
        <img
          width={32}
          height={32}
          src={flagUrl}
          alt={`${
            lang === "es"
              ? "usa flag for lang change"
              : "mexico flag for lang change"
          }`}
        />

        {languageCaption}
      </a>
    </div>
  </section>

  <section
    id="mobile-menu"
    class="fixed w-full h-full hidden md:hidden bg-black/60 inset-0 backdrop-blur-sm"
  >
    <nav
      id="mobile-menu-content"
      class="bg-white flex flex-col dark:bg-black_rain w-8/12 h-full transition-all duration-300 ease-in-out transform translate-x-[-100%]"
    >
      <section
        class="flex items-center gap-1 border-b dark:border-b-black_rain-900 p-4 justify-between"
      >
        <div class="flex items-center gap-1">
          <img src="/og-image.jpg" width="32" class="" alt="Jorge A Macias Z" />

          <h1 class="font-bold">Jorge Macias</h1>
        </div>

        <button type="button" class="menu-opener">
          <Menu size={32} />
          <X class="hidden hover:text-red-500" size={32} />
        </button>
      </section>

      <div
        class="p-2 border-b dark:border-b-black_rain-900 flex items-center justify-between"
      >
        <ThemeSwitcher client:only="react" />

        <a class="flex items-center gap-2 py-1" href={languageUrl}>
          <img
            width={32}
            height={32}
            src={flagUrl}
            alt={`${
              lang === "es"
                ? "usa flag for lang change"
                : "mexico flag for lang change"
            }`}
          />

          {languageCaption}
        </a>
      </div>

      <ul class="p-2 border-b dark:border-b-black_rain-900">
        {
          HEADER.map(({ label, url }) => {
            return <Link label={label} url={url} />;
          })
        }
      </ul>

      <section class="p-4 border-b dark:border-b-black_rain-900">
        {
          import.meta.env.PUBLIC_VERSION !== undefined && (
            <p class="text-xs">
              {HEADER_PAGE_VERSION_CAPTION}{" "}
              {lang === "es" ? "versi√≥n" : "version"}{" "}
              {import.meta.env.PUBLIC_VERSION}
            </p>
          )
        }
      </section>
    </nav>
  </section>

  <section class="md:hidden flex items-center">
    <button type="button" class="menu-opener">
      <Menu size={32} />
      <X class="hidden hover:text-red-500" size={32} />
    </button>
  </section>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const menuButtons = document.querySelectorAll(".menu-opener");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuContent = document.getElementById("mobile-menu-content");
    const menuIcons = document.querySelectorAll(".lucide.lucide-menu");
    const closeIcons = document.querySelectorAll(".lucide.lucide-x");

    let isMenuOpen = false;

    const toggleMenu = () => {
      isMenuOpen = !isMenuOpen;

      menuIcons.forEach((icon) => icon.classList.toggle("hidden", isMenuOpen));

      closeIcons.forEach((icon) =>
        icon.classList.toggle("hidden", !isMenuOpen)
      );

      if (isMenuOpen) {
        mobileMenu.classList.remove("hidden");
        setTimeout(() => {
          menuContent.classList.remove("translate-x-[-100%]");
        }, 20);
      } else {
        menuContent.classList.add("translate-x-[-100%]");

        setTimeout(() => {
          mobileMenu.classList.add("hidden");
        }, 300);
      }

      document.documentElement.style.overflow = isMenuOpen ? "hidden" : "";
    };

    menuButtons.forEach((btn) => btn.addEventListener("click", toggleMenu));

    mobileMenu.addEventListener("click", (e) => {
      if (e.target === mobileMenu) {
        toggleMenu();
      }
    });
  });
</script>
