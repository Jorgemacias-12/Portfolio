---
import { appendBaseUrl } from "@/utils";
import { getI18N } from "@/i18n";
import { ThemeSwitcher } from "../ThemeSwitcher";
import { Menu, X } from "@lucide/astro";
import { Link } from "../Link";

const { lang } = Astro.props;

const languageUrl = lang === "es" ? appendBaseUrl("/en") : appendBaseUrl("/");
const languageCaption = lang === "es" ? "EN" : "ES";
const flagUrl = appendBaseUrl(lang === "es" ? "/usa.svg" : "/mexico.svg");
const { COMPONENTS, HEADER_MENU_CAPTION, HEADER_PAGE_VERSION_CAPTION } =
  getI18N(lang);
const { HEADER } = COMPONENTS;
---

<header
  id="header"
  class="border-b w-full p-2 h-16 flex justify-between items-center bg-white dark:bg-black_rain dark:border-b-black_rain-900 dark:text-white"
>
  <section class="flex items-center gap-1">
    <img src="/og-image.jpg" width="32" class="" alt="Jorge A Macias Z" />

    <h1 class="font-bold">Jorge Macias</h1>
  </section>

  <ul class="hidden md:flex md:items-center">
    {
      HEADER.map(({ label, url }) => {
        return <Link label={label} url={url} />;
      })
    }
  </ul>

  <section class="hidden md:flex md:items-center md:justify-between gap-4">
    <div class="p-2 flex items-center justify-between gap-1">
      <ThemeSwitcher client:only="react" />

      <a class="flex items-center gap-2 py-1" href={languageUrl}>
        <img
          width={32}
          height={32}
          src={flagUrl}
          alt={`${
            lang === "es"
              ? "usa flag for lang change"
              : "mexico flag for lang change"
          }`}
        />

        {languageCaption}
      </a>
    </div>
  </section>

  <section
    id="mobile-menu"
    class="fixed w-full min-h-dvh h-full hidden md:hidden bg-black/60 inset-0 backdrop-blur-sm"
  >
    <nav
      id="mobile-menu-content"
      class="flex flex-col justify-between bg-white dark:bg-black_rain w-8/12 h-full transition-all duration-300 ease-in-out transform translate-x-[-100%]"
    >
      <section
        class="flex items-center gap-1 border-b bg-white dark:bg-black_rain dark:border-b-black_rain-900 p-4 justify-between"
      >
        <div class="flex items-center gap-1">
          <img src="/og-image.jpg" width="32" class="" alt="Jorge A Macias Z" />

          <h1 class="font-bold">Jorge Macias</h1>
        </div>

        <button type="button" class="menu-opener">
          <Menu size={32} />
          <X class="hidden hover:text-red-500" size={24} />
        </button>
      </section>

      <section class="flex flex-col flex-1">
        <div
          class="p-2 border-b bg-white dark:bg-black_rain dark:border-b-black_rain-900 flex items-center justify-between"
        >
          <ThemeSwitcher client:only="react" />

          <a class="flex items-center gap-2 py-1" href={languageUrl}>
            <img
              width={32}
              height={32}
              src={flagUrl}
              alt={`${
                lang === "es"
                  ? "usa flag for lang change"
                  : "mexico flag for lang change"
              }`}
            />

            {languageCaption}
          </a>
        </div>

        <ul
          class="p-2 border-b bg-white dark:bg-black_rain dark:border-b-black_rain-900"
        >
          {
            HEADER.map(({ label, url }) => {
              return <Link label={label} url={url} />;
            })
          }
        </ul>
      </section>

      <section
        class="p-4 border-t bg-white dark:bg-black_rain dark:border-t-black_rain-900"
      >
        {
          import.meta.env.PUBLIC_VERSION !== undefined && (
            <p class="text-xs">
              {HEADER_PAGE_VERSION_CAPTION}{" "}
              {lang === "es" ? "versi√≥n" : "version"}{" "}
              {import.meta.env.PUBLIC_VERSION}
            </p>
          )
        }
      </section>
    </nav>
  </section>

  <section class="md:hidden flex items-center">
    <button type="button" class="menu-opener">
      <Menu size={32} />
      <X class="hidden hover:text-red-500" size={32} />
    </button>
  </section>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const headerEl = document.getElementById("header");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuContent = document.getElementById("mobile-menu-content");
    const menuButtons = document.querySelectorAll(".menu-opener");
    const menuIcons = document.querySelectorAll(".lucide.lucide-menu");
    const closeIcons = document.querySelectorAll(".lucide.lucide-x");

    let isMenuOpen = false;
    let touchStartX = 0;
    let touchStartY = 0;
    let isSwipingHorizontally = false;
    const swipeThreshold = 80;

    const glassClasses = [
      "fixed",
      "top-0",
      "left-0",
      "right-0",
      "z-40",
      "backdrop-blur-md",
      "bg-white/90",
      "dark:bg-[#212529]/90",
      "border-b-white/20",
      "dark:border-b-[#070708]/50",
    ];

    const headerObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const shouldApplyGlass = !entry.isIntersecting;
          glassClasses.forEach((c) => {
            headerEl.classList.toggle(c, shouldApplyGlass);
          });

          if (shouldApplyGlass) {
            headerEl.classList.add("w-full", "px-4");
          } else {
            headerEl.classList.add("bg-white", "dark:bg-black_rain");
          }
        });
      },
      { threshold: 0.1, rootMargin: "20px 0px 0px 0px" }
    );

    const triggerElement = document.createElement("div");
    triggerElement.style.position = "absolute";
    triggerElement.style.top = "0";
    triggerElement.style.height = "1px";
    triggerElement.style.width = "100%";
    triggerElement.style.pointerEvents = "none";
    document.body.prepend(triggerElement);
    headerObserver.observe(triggerElement);

    const toggleMenu = (shouldOpen) => {
      if (typeof shouldOpen === "boolean") {
        if (shouldOpen === isMenuOpen) return;
        isMenuOpen = shouldOpen;
      } else {
        isMenuOpen = !isMenuOpen;
      }

      menuIcons.forEach((icon) => icon.classList.toggle("hidden", isMenuOpen));
      closeIcons.forEach((icon) =>
        icon.classList.toggle("hidden", !isMenuOpen)
      );

      if (isMenuOpen) {
        mobileMenu.classList.remove("hidden");
        setTimeout(
          () => menuContent.classList.remove("translate-x-[-100%]"),
          20
        );
      } else {
        menuContent.classList.add("translate-x-[-100%]");
        setTimeout(() => mobileMenu.classList.add("hidden"), 300);
      }

      document.documentElement.style.overflow = isMenuOpen ? "hidden" : "";
    };

    const handleTouchStart = (e) => {
      if (window.innerWidth >= 768) return;

      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      isSwipingHorizontally = false;
    };

    const handleTouchMove = (e) => {
      if (window.innerWidth >= 768) return;

      const touchX = e.touches[0].clientX;
      const touchY = e.touches[0].clientY;
      const diffX = touchX - touchStartX;
      const diffY = touchY - touchStartY;

      if (!isSwipingHorizontally) {
        if (Math.abs(diffX) > Math.abs(diffY)) {
          isSwipingHorizontally = true;
        }
      }

      if (isSwipingHorizontally && Math.abs(diffX) > 10) {
        e.preventDefault();
      }
    };

    const handleTouchEnd = (e) => {
      if (window.innerWidth >= 768) return;

      const touchEndX = e.changedTouches[0].clientX;
      const diffX = touchEndX - touchStartX;

      if (Math.abs(diffX) > swipeThreshold) {
        if (diffX > 0 && !isMenuOpen) {
          toggleMenu(true);
        } else if (diffX < 0 && isMenuOpen) {
          toggleMenu(false);
        }
      }
    };

    menuButtons.forEach((btn) =>
      btn.addEventListener("click", () => toggleMenu())
    );
    mobileMenu.addEventListener(
      "click",
      (e) => e.target === mobileMenu && toggleMenu(false)
    );

    document.addEventListener("touchstart", handleTouchStart, {
      passive: false,
    });
    document.addEventListener("touchmove", handleTouchMove, { passive: false });
    document.addEventListener("touchend", handleTouchEnd, { passive: true });

    window.addEventListener("beforeunload", () => {
      headerObserver.unobserve(triggerElement);
      document.removeEventListener("touchstart", handleTouchStart);
      document.removeEventListener("touchmove", handleTouchMove);
      document.removeEventListener("touchend", handleTouchEnd);
    });
  });
</script>
